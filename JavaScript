const { jsPDF } = window.jspdf;
    import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

    const supabaseUrl = 'https://zkdfimbfwgofkmmcvyfu.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InprZGZpbWJmd2dvZmttbWN2eWZ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA2MzQxMTksImV4cCI6MjA2NjIxMDExOX0.vOTrEVYX30FpWPQykY5CF1QCfkyG5gDLnI_2N9TATRE';
    const supabase = createClient(supabaseUrl, supabaseKey);

    const state = { clientes: [], servicos: [], orcamentos: [], servicosNoOrcamento: [], orcamentoAtual: null };

    // --- UTILS ---
    const showToast = (message, type = 'success') => { /* ... (código mantido da versão anterior) ... */ };
    const showConfirmationModal = (message, onConfirm) => { /* ... (código mantido da versão anterior) ... */ };

    // --- RENDER FUNCTIONS ---
    function renderLists() {
        document.getElementById('lista-clientes').innerHTML = state.clientes.map(c => `<li data-id="${c.id}"><div class="item-info">${c.nome} — ${c.carro || '-'}</div></li>`).join('') || `<li>Nenhum cliente.</li>`;
        document.getElementById('lista-servicos').innerHTML = state.servicos.map(s => `<li data-id="${s.id}"><div class="item-info">${s.descricao} — R$ ${s.valor.toFixed(2)}</div></li>`).join('') || `<li>Nenhum serviço.</li>`;
        
        const listaHistorico = document.getElementById('lista-historico');
        listaHistorico.innerHTML = state.orcamentos.map(o => {
            if (!o.clientes) return '';
            const statusClass = `status-${o.status.replace(/\s+/g, '-')}`;
            return `<li data-id="${o.id}"><div class="item-info"><strong>${o.clientes.nome}</strong> (R$ ${o.valor_total.toFixed(2)})</div><span class="status-badge ${statusClass}">${o.status}</span></li>`;
        }).join('') || `<li>Nenhum histórico.</li>`;

        const selCliente = document.querySelector('#form-orcamento [name="cliente_id"]');
        const selServico = document.getElementById('servico-para-adicionar');
        selCliente.innerHTML = '<option value="">Selecione</option>' + state.clientes.map(c => `<option value="${c.id}">${c.nome}</option>`).join('');
        selServico.innerHTML = '<option value="">Selecione</option>' + state.servicos.map(s => `<option value="${s.id}" data-valor="${s.valor}">${s.descricao}</option>`).join('');
    }

    function renderServicosNoOrcamento() {
        const lista = document.getElementById('orcamento-servicos-lista');
        lista.innerHTML = state.servicosNoOrcamento.map(s => `<li data-id="${s.id}"><div class="item-info">${s.descricao}</div><span>R$ ${s.valor.toFixed(2)}</span><button type="button" class="item-actions" data-action="remove-servico" style="margin-left:15px; color: #ff5252;">&times;</button></li>`).join('');
        calcularTotalOrcamento();
    }

    function calcularTotalOrcamento() {
        const subtotal = state.servicosNoOrcamento.reduce((acc, s) => acc + s.valor, 0);
        const descontoEl = document.querySelector('#form-orcamento [name="desconto"]');
        const desconto = parseFloat(descontoEl.value) || 0;
        const total = subtotal * (1 - desconto / 100);
        document.getElementById('orcamento-total').textContent = `Total: R$ ${total.toFixed(2)}`;
    }
    
    // --- DATA LOGIC ---
    async function loadAllData() {
        try {
            const [clientesRes, servicosRes, orcamentosRes] = await Promise.all([
                supabase.from('clientes').select('*').order('nome'),
                supabase.from('servicos').select('*').order('descricao'),
                supabase.from('orcamentos').select(`*, clientes(*), orcamento_itens(*, servicos(*))`).order('created_at', { ascending: false })
            ]);
            if (clientesRes.error) throw clientesRes.error;
            if (servicosRes.error) throw servicosRes.error;
            if (orcamentosRes.error) throw orcamentosRes.error;

            state.clientes = clientesRes.data;
            state.servicos = servicosRes.data;
            state.orcamentos = orcamentosRes.data;
            renderLists();
        } catch (error) {
            showToast("Falha ao carregar dados do servidor.", "error");
        }
    }

    // --- EVENT HANDLERS ---
    document.getElementById('btn-add-servico').addEventListener('click', () => {
        const select = document.getElementById('servico-para-adicionar');
        const servicoId = parseInt(select.value);
        if (!servicoId) return;

        if (state.servicosNoOrcamento.some(s => s.id === servicoId)) {
            showToast('Serviço já adicionado.', 'error');
            return;
        }
        
        const servico = state.servicos.find(s => s.id === servicoId);
        state.servicosNoOrcamento.push(servico);
        renderServicosNoOrcamento();
        select.value = '';
    });
    
    document.getElementById('orcamento-servicos-lista').addEventListener('click', e => {
        if (e.target.dataset.action === 'remove-servico') {
            const servicoId = parseInt(e.target.closest('li').dataset.id);
            state.servicosNoOrcamento = state.servicosNoOrcamento.filter(s => s.id !== servicoId);
            renderServicosNoOrcamento();
        }
    });

    document.querySelector('#form-orcamento [name="desconto"]').addEventListener('input', calcularTotalOrcamento);

    document.getElementById('form-orcamento').addEventListener('submit', async e => {
        e.preventDefault();
        if (state.servicosNoOrcamento.length === 0) {
            showToast('Adicione pelo menos um serviço ao orçamento.', 'error');
            return;
        }

        const form = e.target;
        const formData = new FormData(form);
        const subtotal = state.servicosNoOrcamento.reduce((acc, s) => acc + s.valor, 0);
        const total = subtotal * (1 - (parseInt(formData.get('desconto')) / 100));

        // 1. Inserir o orçamento principal
        const { data: orcamento, error: orcError } = await supabase.from('orcamentos')
            .insert({
                cliente_id: formData.get('cliente_id'),
                desconto: formData.get('desconto'),
                valor_total: total,
                status: 'Orçamento'
            }).select().single();

        if (orcError) {
            showToast(`Erro ao salvar orçamento: ${orcError.message}`, 'error');
            return;
        }

        // 2. Inserir os itens do orçamento
        const itensParaInserir = state.servicosNoOrcamento.map(s => ({
            orcamento_id: orcamento.id,
            servico_id: s.id,
            valor_cobrado: s.valor,
            descricao_servico: s.descricao
        }));
        
        const { error: itensError } = await supabase.from('orcamento_itens').insert(itensParaInserir);

        if (itensError) {
            showToast(`Erro ao salvar itens: ${itensError.message}`, 'error');
        } else {
            showToast('Orçamento salvo com sucesso!', 'success');
            form.reset();
            state.servicosNoOrcamento = [];
            renderServicosNoOrcamento();
            await loadAllData();
            document.querySelector(`button[data-tab="historico"]`).click();
        }
    });
    
    // --- Resto dos listeners e init ---
    document.addEventListener('DOMContentLoaded', () => { /* ... (código mantido e ajustado para nova estrutura) ... */ });
